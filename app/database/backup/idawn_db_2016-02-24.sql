-- phpMyAdmin SQL Dump
-- http://www.phpmyadmin.net
--
-- Generation Time: Feb 24, 2016 at 05:24 PM

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `wqsSjytcjJjwHqhTeOAU`
--

-- --------------------------------------------------------

--
-- Table structure for table `albums`
--

CREATE TABLE IF NOT EXISTS `albums` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `notes` varchar(500) NOT NULL DEFAULT '',
  `uuid` varchar(255) NOT NULL DEFAULT '',
  `cover` varchar(255) DEFAULT NULL,
  `create_date` date NOT NULL DEFAULT '0000-00-00',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `albums`
--

INSERT INTO `albums` (`id`, `title`, `notes`, `uuid`, `cover`, `create_date`) VALUES
(1, '绿色风格的课件PPT模板', '这是一个绿色风格的课件PPT模板；适用于科技，艺术类的指导课件。', '048588f5-009e-4219-a460-627044191ffa', 'h1.jpg', '2015-11-24'),
(2, '灰色风格的个人介绍模板', '灰色风格的个人介绍模板', 'fc353d28-29ba-457f-a7df-52adb0370cc9', 'h1.jpg', '2015-11-24');

-- --------------------------------------------------------

--
-- Table structure for table `articles`
--

CREATE TABLE IF NOT EXISTS `articles` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `content` text NOT NULL,
  `notes` text,
  `create_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `uuid` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=10 ;

--
-- Dumping data for table `articles`
--

INSERT INTO `articles` (`id`, `title`, `content`, `notes`, `create_date`, `uuid`) VALUES
(1, '在Centos操作系统上安装和配置MySQL', '<p>MySQL是一个小型的关系型数据库管理系统，其被广泛地应用在中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库。</p>\r\n<p>本文主要介绍在Centos5.x和Centos6.x操作系统上，如何安装MySQL，如何配置和启动MySQL服务，以及如何设置用户远程访问权限等。在安装MySQL之前，系统需要已经安装yum和rpm。</p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>安装MySQL</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">sudo yum</span><span> list mysql mysql-server</span>\r\n        <span class="notes">// 查看当前系统有无mysql安装包</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">sudo yum</span><span> install mysql mysql-server</span>\r\n        <span class="notes">// 初始化安装</span>\r\n    </p>\r\n</div>\r\n<p>安装过程中遇到Y/N选择时，一直选择Y继续即可。</p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>配置和启动服务</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">chkconfig</span><span> --level 2345 mysqld on</span>\r\n        <span class="notes">// 设置开机启动否</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">sudo service</span><span> mysqld start|restart</span>\r\n        <span class="notes">// 启动或者重启服务</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// 开启3306端口并保存</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">sudo</span><span> /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">sudo</span><span> /etc/rc.d/init.d/iptables save</span>\r\n    </p>\r\n</div>\r\n<p>chkconfig命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</p>\r\n<table class="dictionary">\r\n    <tbody>\r\n        <tr>\r\n            <td>参数</td>\r\n            <td>说明</td>\r\n        </tr>\r\n        <tr>\r\n            <td>--level 等级代号</td>\r\n            <td>\r\n                指定读系统服务要在哪一个执行等级中开启或关毕。\r\n                <ul>\r\n                    <li>等级0表示：表示关机</li>\r\n                    <li>等级1表示：单用户模式</li>\r\n                    <li>等级2表示：无网络连接的多用户命令行模式</li>\r\n                    <li>等级3表示：有网络连接的多用户命令行模式</li>\r\n                    <li>等级4表示：不可用</li>\r\n                    <li>等级5表示：带图形界面的多用户模式</li>\r\n                    <li>等级6表示：重新启动</li>\r\n                </ul>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>--list [name]</td>\r\n            <td>显示所有运行级系统服务的运行状态信息（on或off）。如果指定了name，那么只显示指定的服务在不同运行级的状态。 </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<p class="sep-line"></p>\r\n<h2>修改密码并设置远程访问</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">mysql</span>\r\n        <span> -u root</span>\r\n        <span class="notes">// 登录数据库</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// 连接mysql数据库</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">use mysql</span>\r\n        <span>;</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">update</span>\r\n        <span> user set password=password(''密码'') where user=''root'';</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">flush</span>\r\n        <span> privileges;</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">grant</span>\r\n        <span> all privileges on *.* to ''root''@''%'' identified by ''123456'' with grant option;</span>\r\n        <span class="notes">// 设置Mysql远程访问</span>\r\n    </p>\r\n</div>', '<p>MySQL是一个小型的关系型数据库管理系统，其被广泛地应用在中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库。</p>\r\n<p>本文主要介绍在Centos5.x和Centos6.x操作系统上，如何安装MySQL，如何配置和启动MySQL服务，以及如何设置用户远程访问权限等。在安装MySQL之前，系统需要已经安装yum和rpm。</p>', '2015-11-24 14:29:00', 'b83fc189-518b-4bbd-a270-a6a96652ceef'),
(2, 'Mac OS常用的快捷键', '<p>Mac快捷键中主要有四个修饰键，分别是Command，Control，Option和Shift。这四个键分别有自己的图案，他们经常出现在Mac应用程序中的菜单栏里，方便你随时学习新的快捷键。</p>\r\n￼\r\n<p class="sep-line"></p>\r\n<h2>基本的快捷键</h2>\r\n\r\n<p>Command是Mac里最重要的修饰键，在大多数情况下相当于Windows下的Ctrl。所以以下最基本操作很好理解： </p>\r\n<div class="code">\r\n    <p>\r\n        <span>Command-Z</span><span class="notes">// 撤销</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-X</span><span class="notes">// 剪切</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-C</span><span class="notes">// 拷贝</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-V</span><span class="notes">// 粘贴</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-A</span><span class="notes">// 粘贴</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-S</span><span class="notes">// 保存</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-F</span><span class="notes">// 查找</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>应用程序中的快捷键</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>Command-Option-esc</span><span class="notes">// 打开强制退出窗口</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Q</span><span class="notes">// 退出（Quit）最前面的应用程序</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-H</span><span class="notes">// 隐藏（Hide）当前正在运行的应用程序窗口</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Option-H</span><span class="notes">// 隐藏（Hide）其他应用程序窗口</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Shift-Z</span><span class="notes">// 重做，也就是撤销的逆向操作</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Tab</span><span class="notes">// 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于Windows中（Alt+Tab）</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>文本处理中的快捷键</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>Command-上箭头</span><span class="notes">// 将光标移至文稿开头</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-下箭头</span><span class="notes">// 将光标移至文稿末尾</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-左箭头</span><span class="notes">// 将光标移至当前行的行首</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-右箭头</span><span class="notes">// 将光标移至当前行的行尾</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-B</span><span class="notes">// 切换所选文字粗体（Bold）显示</span>\r\n    </p>\r\n    <p>\r\n        <span>fn-Delete</span><span class="notes">// 相当于PC全尺寸键盘上的Delete，也就是向后删除</span>\r\n    </p>\r\n    <p>\r\n        <span>fn-上箭头</span><span class="notes">// 向上滚动一页（Page Up）</span>\r\n    </p>\r\n    <p>\r\n        <span>fn-下箭头</span><span class="notes">// 向下滚动一页（Page Down）</span>\r\n    </p>\r\n    <p>\r\n        <span>fn-左箭头</span><span class="notes">// 滚动至文稿开头（Home）</span>\r\n    </p>\r\n    <p>\r\n        <span>fn-右箭头</span><span class="notes">// 滚动至文稿末尾（End）</span>\r\n    </p>\r\n    <p>\r\n        <span>Option-右箭头</span><span class="notes">// 将光标移至下一个单词的末尾</span>\r\n    </p>\r\n    <p>\r\n        <span>Option-左箭头</span><span class="notes">// 将光标移至上一个单词的开头</span>\r\n    </p>\r\n    <p>\r\n        <span>Control-A</span><span class="notes">// 移至行或段落的开头</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>文件处理的快捷键</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>Command-Shift-N</span><span class="notes">// 新建文件夹（New）</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Shift-G</span><span class="notes">// 调出窗口，可输入绝对或者相对路径直达文件夹</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Option-V</span><span class="notes">// 作用相当于Windows里的文件剪切</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Delete</span><span class="notes">// 将文件移至废纸篓</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Shift-Delete</span><span class="notes">// 清倒废纸篓</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-上箭头</span><span class="notes">// 回退</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-下箭头</span><span class="notes">// 前进</span>\r\n    </p>\r\n    <p>\r\n        <span>return</span><span class="notes">// 点击文件，按下return可重命名文件</span>\r\n    </p>\r\n    <p>\r\n        <span>空格键</span><span class="notes">// 点击文件，按下space可预览文件</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>浏览器中的快捷键</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>Control-Tab</span><span class="notes">// 转向下一个标签页</span>\r\n    </p>\r\n    <p>\r\n        <span>Control-Shift-Tab</span><span class="notes">// 转向上一个标签页</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-L</span><span class="notes">// 光标直接跳至地址栏</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-加号或等号</span><span class="notes">// 放大页面</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-减号</span><span class="notes">// 缩小页面</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>截屏的快捷键</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>Command-Shift-4</span><span class="notes">// 截取所选屏幕区域到一个文件（Desktop）</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Shift-3</span><span class="notes">// 截取全部屏幕到文件（Desktop）</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Shift-Control-3</span><span class="notes">// 光截取全部屏幕到剪贴板</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Shift-4</span><span class="notes">// 截取所选屏幕区域到一个文件，或按空格键仅捕捉一个窗口</span>\r\n    </p>\r\n    <p>\r\n        <span>Command-Shift-Control-4</span><span class="notes">// 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>启动与关机的快捷键</h2>\r\n\r\n<p>按住电源按钮5秒 强制Mac关机</p>\r\n', '<p>Mac快捷键中主要有四个修饰键，分别是Command，Control，Option和Shift。这四个键分别有自己的图案，他们经常出现在Mac应用程序中的菜单栏里，方便你随时学习新的快捷键。</p>', '2015-12-03 16:19:00', 'b57221e6b-c034-421e-9903-f9fc4fcfbab9'),
(3, '不可错过的迷你js库', '<p>本文将介绍一些非常赞的开源迷你库；这些库的共性是非常小，而且功能单一。</p>\r\n\r\n<h2>cookie.js</h2>\r\n\r\n<p>由于原生的JavaScript操作cookie是非常不方便的；因此cookie.js目标就是提供一个容易上手并强力的操作cookie的迷你库；cookie.js提供了一系列的方法来操作cookie，这些方法支持多参数输入和链式操作；而且其不依赖任何第三方库，压缩后只有0.9KB；并且cookie.js可以通过AMD和CommonJS加载。<a href="https://github.com/florian/cookie.js" target="_blank">更多了解</a></p>\r\n\r\n<h2>data.js</h2>\r\n\r\n<p>data.js是带有消息通知的数据中心，我称其为会说话的数据。旨在让编程变得简单，世界变得美好。其实就是发布订阅模式的一种实现，目的就是程序的解耦合。支持AMD，NPM等多种加载方式。<a href="https://github.com/yanhaijing/data.js" target="_blank">更多了解</a></p>\r\n\r\n<h2>favico.js</h2>\r\n\r\n<p>favico.js作用是在网站favicon图标上添加徽标；这些徽标可以是简单的数字背景，图片和视频video。<a href="http://lab.ejci.net/favico.js/" target="_blank">更多了解</a></p>\r\n\r\n<h2>Move.js</h2>\r\n\r\n<p>Move.js提供了一系列简单而优雅的方法来操作CSS3动画。<a href="http://visionmedia.github.io/move.js/" target="_blank">更多了解</a></p>\r\n\r\n<h2>Keypress.js</h2>\r\n\r\n<p>Keypress.js是一个能够捕获键盘任意按钮输入的库，不用去记忆每个按键的ASCII码即可。<a href="http://dmauro.github.io/Keypress/" target="_blank">更多了解</a></p>\r\n\r\n<h2>device.js</h2>\r\n\r\n<p>device.js提供了一系列检查浏览器运行平台类型的方法，例如IOS，Android，mobile，Desktop等，比jq.browser全面。<a href="http://matthewhudson.me/projects/device.js/" target="_blank">更多了解</a></p>\r\n\r\n<h2>is.js</h2>\r\n\r\n<p>is.js提供了一系列检查方法，这些检查方法几乎涵盖了全部的各种检测，例如常用的类型检测，正则表达式检测，排序检测，IP检测等等。<a href="http://is.js.org" target="_blank">更多了解</a></p>\r\n\r\n<h2>es5-shim.js和es6-promise.js</h2>\r\n\r\n<p>es5-shim.js提供了es5常用的方法实现，es6-promise.js提供了es6的promise方法的实现；用这两个库就不必担心兼容问题。<a href="https://github.com/es-shims/es5-shim" target="_blank">es5-shim.js更多了解</a>--<a href="https://github.com/jakearchibald/es6-promise" target="_blank">es6-promise.js更多了解</a></p>\r\n\r\n<h2>share.js</h2>\r\n\r\n<p>share.js提供一键分享到微博、QQ空间、QQ好友、微信、腾讯微博、豆瓣、Facebook、Twitter、Linkedin、Google+、点点等社交网站；设计了一套优美的分享图标，是一个比较全面的分享库。<a href="https://github.com/overtrue/share.js" target="_blank">更多了解</a></p>\r\n\r\n<h2>mathjs</h2>\r\n\r\n<p>mathjs提供了一系列数学运算方法，不仅扩展了原生的Math对象方法，并且更加易于学习和使用。<a href="http://mathjs.org/index.html"  target="_blank">更多了解</a></p>\r\n\r\n<h2>placeholder.js</h2>\r\n\r\n<p>placeholder.js是一个能够生成图片placeholders的客户端库，不依赖于jQuery或者其他库。<a href="https://github.com/hustcc/placeholder.js" target="_blank">更多了解</a></p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>总结</h2>\r\n\r\n<p>本文介绍的只是我自己收集或者用过的一小部分而已，最后向大家推荐<a href="http://microjs.com/" target="_blank">microjs</a>，这里收集了太多小而美的库，自己来淘宝吧。</p>', '<p>本文将介绍一些非常赞的开源迷你库；这些库的共性是非常小，而且功能单一。</p>', '2016-01-06 11:58:11', '18b2a2f2-c1ac-4d4e-9fe4-3a4d6d133444'),
(4, 'Mocha测试框架的简单介绍', '<p>mocha是一个功能丰富的JavaScript测试框架，其可以运行于Node.js服务端，也可以运行于浏览器端；让异步测试更加简单而且有趣；mocha可以连续执行，并且可以灵活的或者精确的配置测试报告来映射未捕获到到得程序异常。本文主要讲述的是最简单最入门的使用方法。</p>\r\n\r\n<h2>初始化安装</h2>\r\n\r\n<p>mocha需要全局安装，并且mocha的默认执行路径，就是当前项目目录下得test目录内的所有js文件，即test/*.js。</p>\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">npm</span><span> install -g mocha</span><span class="notes">// 全局安装mocha</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">mkdir</span><span> test</span><span class="notes">// 创建test目录</span>\r\n    </p>\r\n    <p>\r\n        <span>$EDITOR test/test.js</span><span class="notes">// 编辑器创建并打开test.js文件</span>\r\n    </p>\r\n</div>\r\n<p>第一个测试实例：</p>\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">var</span><span> assert = </span><span class="keyword">require</span><span>(''assert'');</span><span class="notes">// 调用默认的断言库</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">describe</span><span>(''Array'', <span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span class="keyword">describe</span><span>(''#indexOf()'', <span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span class="keyword">it</span><span>(''should return -1 when the value is not present'', <span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span class="keyword">assert</span>.<span class="keyword">equal</span><span>(-1, [1,2,3].</span><span class="keyword">indexOf</span><span>(5));</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span class="keyword">assert</span>.<span class="keyword">equal</span><span>(-1, [1,2,3].</span><span class="keyword">indexOf</span><span>(0));</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>});</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n</div>\r\n<p>命令行执行mocha，其运行结果：</p>\r\n<p><img src="/img/29c9dc53-8fa1-40a5-a2fd-28d550203153/1.jpg" alt="运行结果"></p>\r\n\r\n<h2>Assertions断言库</h2>\r\n\r\n<p>mocha默认的断言库是assert，其常用的测试方法有：</p>\r\n<ul>\r\n    <li>\r\n        <p>assert.fail(actual, expected, message, operator)</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert(value, message), assert.ok(value, [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.equal(actual, expected, [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.notEqual(actual, expected, [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.deepEqual(actual, expected, [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.notDeepEqual(actual, expected, [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.strictEqual(actual, expected, [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.notStrictEqual(actual, expected, [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.throws(block, [error], [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.doesNotThrow(block, [error], [message])</p>\r\n        <p></p>\r\n    </li>\r\n    <li>\r\n        <p>assert.ifError(value)</p>\r\n        <p></p>\r\n    </li>\r\n</ul>\r\n<p>mocha支持任何第三方的断言库，只要其能抛出错误异常即可；这就意味着你可以使用常见的你熟悉的任何断言库，例如：should.js，expect.js，chai.js等等。</p>\r\n\r\n<h2>异步测试</h2>\r\n\r\n<p>文章刚开始的例子是一个同步执行的例子，那么如何进行异步测试呢？例如ajax请求结果的测试，数据库请求结果的测试等等。其实对于mocha来说，异步测试是非常简单的，只需要在测试用例函数it，添加回调函数即可，看下面的例子：</p>\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">var</span><span> assert = </span><span class="keyword">require</span><span>(''assert'');</span><span class="notes">// 调用默认的断言库</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">describe</span><span>(''User'', <span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span class="keyword">describe</span><span>(''#save()'', <span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span class="keyword">it</span><span>(''should save without error'', <span class="keyword">function</span><span> (done) {</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span class="keyword">var</span><span> user = </span><span class="keyword">new</span><span> User(''Luna'');</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>user.save(done);</span><span class="notes">// 因为done函数本身可接受一个error参数，因此不需要save异步</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>});</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n</div>\r\n\r\n<h2>测试条件初始化函数</h2>\r\n\r\n<p>mocha提供了一系列的函数：before（所有的测试执行前执行），after（所有的测试执行后执行），beforeEach（每个的测试执行前执行），afterEach（每个的测试执行后执行）；这些函数用于预先设置测试的条件和测试结束后清理测试结果。</p>\r\n\r\n<h2>参考</h2>\r\n\r\n<p><a href="http://mochajs.org/" target="_blank">mocha官方网站</a></p>', '<p>mocha是一个功能丰富的JavaScript测试框架，其可以运行于Node.js服务端，也可以运行于浏览器端；让异步测试更加简单而且有趣；mocha可以连续执行，并且可以灵活的或者精确的配置测试报告来映射未捕获到到得程序异常。本文主要讲述的是最简单最入门的使用方法。</p>', '2016-01-07 11:07:22', '29c9dc53-8fa1-40a5-a2fd-28d550203153'),
(5, 'Gulp前端代码构建工具介绍', '<p>Gulp是一款自动化前端代码构建工具；其具有易于使用，构建快速，高品质插件，以及易于学习的特性。本文主要是简要的讲解Gulp及其常用的插件。想了解更过详情，请看<a href="http://www.gulpjs.com.cn/" target="_blank">http://www.gulpjs.com.cn/</a></p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>安装与运行</h2>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">npm</span><span> install -g gulp</span>\r\n        <span class="notes">// 全局安装gulp</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">npm</span><span> install gulp</span><span class="keyword"> --save-dev</span>\r\n        <span class="notes">// 作为项目的开发依赖（devDependencies）安装</span>\r\n    </p>\r\n</div>\r\n\r\n<p>然后，在项目根目录下创建一个名为gulpfile.js的文件，编辑下面的代码：</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">var</span><span> gulp = </span>\r\n        <span class="keyword">require</span><span>(''gulp'');</span>\r\n    </p>\r\n    <p>\r\n        <span>gulp.task(''default'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span class="notes">// 将你的默认的任务代码放在这</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span>gulp.task(''test'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span class="notes">// 将你的测试的任务代码放在这</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n</div>\r\n\r\n<p>最后，在命令行运行gulp：</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>gulp</span><span class="notes"> // 执行默认default的任务</span>\r\n    </p>\r\n    <p>\r\n        <span>gulp test</span><span class="notes"> // 执行test的任务</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>常用的插件介绍</h2>\r\n\r\n<ul>\r\n    <li>\r\n        <p>gulp-minify-css：压缩css样式文件；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-uglify：压缩js脚本文件；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-clean：清理文件；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-stylus：编译stylus文件，以生成css文件；</p>\r\n    </li>\r\n    <li>\r\n        <p>nib：编译stylus的参数；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-jade：编译jade文件，以生成html文件；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-notify：打印构建过程的消息输出；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-plumber：捕获构建过程的异常输出，不中断构建；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-rev：对构建文件进行MD5，并生成对应文件映射表；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-rev-collector：根据MD5文件映射表，替换文件内容；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-jshint：语法检查；</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp-watch：监控文件的变化；</p>\r\n    </li>\r\n</ul>\r\n\r\n<p>如果您想要了解更详细的插件使用，请访问<a href="https://www.npmjs.com/" target="_blank">https://www.npmjs.com/</a>搜索即可。</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span class="keyword">npm</span><span> install gulp-minify-css gulp-uglify gulp-clean gulp-stylus</span><span class="keyword"> --save-dev</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">npm</span><span> install gulp-notify gulp-plumber gulp-rev gulp-rev-collector</span><span class="keyword"> --save-dev</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">npm</span><span> install gulp-jshint gulp-watch nib gulp-jade</span><span class="keyword"> --save-dev</span>\r\n    </p>\r\n</div>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span class="notes">// 举个实例</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> gulp = </span><span class="keyword">require</span><span>(''gulp'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> stylus = </span><span class="keyword">require</span><span>(''gulp-stylus'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> watch = </span><span class="keyword">require</span><span>(''gulp-watch'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> notify = </span><span class="keyword">require</span><span>(''gulp-notify'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> plumber = </span><span class="keyword">require</span><span>(''gulp-plumber'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> minifycss = </span><span class="keyword">require</span><span>(''gulp-minify-css'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> uglify = </span><span class="keyword">require</span><span>(''gulp-uglify'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> clean = </span><span class="keyword">require</span><span>(''gulp-clean'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> nib = </span><span class="keyword">require</span><span>(''nib'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> jshint = </span><span class="keyword">require</span><span>(''gulp-jshint'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> jade = </span><span class="keyword">require</span><span>(''gulp-jade'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> rev = </span><span class="keyword">require</span><span>(''gulp-rev'');</span>\r\n    </p>\r\n    <p>\r\n        <span class="keyword">var</span><span> revCollector = </span><span class="keyword">require</span><span>(''gulp-rev-collector'');</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// 清除文件任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''clean-files'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src([''./css/*.css'', ''./js/*.css'', ''./html/*.html''], {read: false})</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(plumber({errorHandler: notify.onError(''error message: <%= error.message %>'')}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(clean({force: true}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>message: ''<%= file.relative %> has bean removed successful'',</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>title: ''clean files''</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(plumber.stop());</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// 监控stylus文件变化任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''stylus-watch'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src(''./stylus/*.styl'')</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(watch(</span><span class="keyword">function</span><span> (files) {</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>return files</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(plumber({errorHandler: notify.onError(''error message: <%= error.message %>'')}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(stylus({use: [nib()]}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>message: ''<%= file.relative %> mcompiled successful'',</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>title: ''minify css''</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(rev())</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(gulp.dest(''./css''))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(rev.manifest())</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(gulp.dest(''./css''))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>message: ''<%= file.relative %> minified successful'',</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>title: ''minify css''</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(plumber.stop());</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}));</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// 编译stylus文件任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''stylus-compile'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src(''./stylus/*.styl'')</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(plumber({errorHandler: notify.onError(''error message: <%= error.message %>'')}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(stylus({use: [nib()]}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>message: ''<%= file.relative %> mcompiled successful'',</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>title: ''minify css''</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(minifycss())</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./css''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(rev())</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./css''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(rev.manifest())</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./css''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>message: ''<%= file.relative %> minified successful'',</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>title: ''minify css''</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(plumber.stop());</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// 监控js文件变化任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''script-watch'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src(''./app/*.js'')</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(watch(</span><span class="keyword">function</span><span> (files) {</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>return files</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(plumber({errorHandler: notify.onError(''error message: <%= error.message %>'')}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(gulp.dest(''./js''))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>message: ''<%= file.relative %> mcompiled successful'',</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>title: ''minify js''</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(rev())</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(gulp.dest(''./js''))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(rev.manifest())</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(gulp.dest(''./js''))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>message: ''<%= file.relative %> minified successful'',</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>title: ''minify js''</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(plumber.stop());</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}));</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// 编译js文件任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''script-compile'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src(''./app/*.js'')</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(plumber({errorHandler: notify.onError(''error message: <%= error.message %>'')}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(uglify())</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./js''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>message: ''<%= file.relative %> mcompiled successful'',</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>title: ''minify js''</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./js''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(rev())</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./js''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(rev.manifest())</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./js''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>message: ''<%= file.relative %> minified successful'',</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>title: ''minify js''</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(plumber.stop());</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// 监控jade文件变化任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''jade-watch'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src(''./jade/*.jade'')</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(watch(</span><span class="keyword">function</span><span> (files) {</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>return files</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(revCollector())</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(jade({</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>pretty: true</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(gulp.dest(''./html''))</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>message: ''<%= file.relative %> jade complied successful'',</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>title: ''complie jade''</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}));</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// 编译jade文件任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''jade-compile'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src(''./jade/*.jade'')</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(revCollector())</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(jade({</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>pretty: true</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(gulp.dest(''./html''))</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(notify({</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>message: ''<%= file.relative %> jade complied successful'',</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>title: ''complie jade''</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}))</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1"><span class="notes">// js语法检查任务</span></p>\r\n    <p>\r\n        <span>gulp.task(''hint'', </span><span class="keyword">function</span><span> () {</span>\r\n    </p>\r\n    <p class="text-indent-4">\r\n        <span>gulp.src(''./app/*.js'')</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>.pipe(watch(</span><span class="keyword">function</span><span> (files) {</span>\r\n    </p>\r\n    <p class="text-indent-12">\r\n        <span>return files.pipe(jshint())</span>\r\n    </p>\r\n    <p class="text-indent-16">\r\n        <span>.pipe(jshint.reporter());</span>\r\n    </p>\r\n    <p class="text-indent-8">\r\n        <span>}));</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n\r\n    <p class="margin-top-1">\r\n        <span>gulp.task(''default'', [''build'']);</span>\r\n    </p>\r\n    <p>\r\n        <span>gulp.task(''build'', [''clean-files'', ''stylus-compile'', ''script-compile'', ''jade-compile'']);</span>\r\n    </p>\r\n    <p>\r\n        <span>gulp.task(''watch'', [''clean-files'', ''stylus-watch'', ''script-watch'', ''jade-watch'']);</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>常用的方法介绍</h2>\r\n\r\n<ul>\r\n    <li>\r\n        <p>gulp.task(name[, deps], fn)</p>\r\n        <p>定义一个 task,声明它的名称, 任务依赖, 和任务内容.</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp.src(globs[, options])</p>\r\n        <p>读取文件,参数为文件路径字符串或数组, 支持通配符.</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp.dest(path[, options])</p>\r\n        <p>写入文件, 作为pipe的一个流程.文件夹不存在时会被自动创建.</p>\r\n    </li>\r\n    <li>\r\n        <p>gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])</p>\r\n        <p>监控文件,执行任务.</p>\r\n    </li>\r\n</ul>\r\n', '<p>Gulp是一款自动化前端代码构建工具；其具有易于使用，构建快速，高品质插件，以及易于学习的特性。本文主要是简要的讲解Gulp及其常用的插件。想了解更过详情，请看<a href="http://www.gulpjs.com.cn/" target="_blank">http://www.gulpjs.com.cn/</a></p>', '2016-01-13 11:32:00', '642b8986-a009-4b98-9905-de5e204c88c3');
INSERT INTO `articles` (`id`, `title`, `content`, `notes`, `create_date`, `uuid`) VALUES
(6, 'JS工具库系列--Underscore.js', '<p>Underscore一个JavaScript工具函数库，提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。Underscore提供了100多个函数，包括常用的map, filter等；当然还有更多专业的辅助函数，如：函数绑定, JavaScript模板功能，创建快速索引，强类型相等测试等等。</p>\r\n\r\n<p>本文主要讲解一些常用的函数方法，如果你想要更详细的了解Underscore，请去<a href="http://underscorejs.org/" target="_blank">官方网站</a>学习。</p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>遍历数组或者对象集合</h2>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.each(list, iterate, [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>顺序遍历数组或者对象。</td>\r\n        <td>\r\n            <ul>\r\n                <li>list -- 遍历的数组或者对象，输出每个值。</li>\r\n                <li>iterate -- 迭代函数，根据遍历的数组或者对象，其参数有两种：(element, index, list)或者(value, key, list)</li>\r\n                <li>context -- 可选参数，将遍历的迭代绑定到context对象</li>\r\n            </ul>\r\n        </td>\r\n        <td>-</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.each([1, 2, 3], </span><span class="keyword">function</span><span> (num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>console.log(num);</span>\r\n    </p>\r\n    <p>\r\n        <span>// => 1 2 3</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => 1 2 3</span>\r\n    </p>\r\n    <p>\r\n        <span>_.each({one: 1, two: 2, three: 3}, </span><span class="keyword">function</span><span> (value) {</span>\r\n    </p>\r\n    <p>\r\n        <span>console.log(value);</span>\r\n    </p>\r\n    <p>\r\n        <span>// => 1 2 3</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => 1 2 3</span>\r\n    </p>\r\n</div>\r\n<p>注意：集合函数能在数组，对象，和类数组对象，比如arguments，NodeList和类似的数据类型上正常工作；但是不能在长度不固定的集合中时候用。</p>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.map(list, iterate, [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>顺序遍历数组或者对象，映射每个值通过迭代函数转换新值，输出新值的数组。</td>\r\n        <td>同_.each</td>\r\n        <td>返回数组</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.map([1, 2, 3], </span><span class="keyword">function</span><span> (num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return num * 3;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => [3, 6, 9]</span>\r\n    </p>\r\n    <p>\r\n        <span>_.map({one: 1, two: 2, three: 3}, </span><span class="keyword">function</span><span> (value) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return num * 3;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => [3, 6, 9] 而非 {one: 3, two: 6, three: 9}</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.reduce(list, iterate, [memo], [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>顺序遍历数组或者对象，以基值为初值，利用迭代函数运算数组或对象的每个值，返回运算结果；如果没有基值，以第一值为基值。</td>\r\n        <td>\r\n            <ul>\r\n                <li>iterate -- 迭代函数，根据遍历的数组或者对象，其参数有两种：(memo, element, index, list)或者(memo, value, key, list)</li>\r\n                <li>memo -- 可选参数，迭代计算的初始基值</li>\r\n                <li>其他参数同_.each</li>\r\n            </ul>\r\n        </td>\r\n        <td>返回运算结果</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.map([1, 2, 3], </span><span class="keyword">function</span><span> (memo, num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return memo + num;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => 6</span>\r\n    </p>\r\n    <p>\r\n        <span>_.map([1, 2, 3], </span><span class="keyword">function</span><span> (memo, num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return memo + num;</span>\r\n    </p>\r\n    <p>\r\n        <span>}, 10);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => 16</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.reduceRight(list, iterate, memo, [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>类似reduce，只不过是逆序遍历。</td>\r\n        <td>同_reduce</td>\r\n        <td>返回运算结果</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.reduceRight([[0, 1], [2, 3], [4, 5]], </span>\r\n        <span class="keyword">function</span><span> (memo, element) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return memo.concat(element);</span>\r\n    </p>\r\n    <p>\r\n        <span>}, []);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => [4, 5, 2, 3, 0, 1]</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.find(list, predicate, [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>顺序遍历数组或者对象，返回第一个通过迭代函数真值检测的元素值；如果没有找到，返回undefined；如果找到匹配的元素，函数将立即返回，不会遍历整个数组或者对象。</td>\r\n        <td>同_.each</td>\r\n        <td>返回匹配的元素</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.find([1, 2, 3, 4, 5, 6], </span><span class="keyword">function</span><span> (num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return num % 2 == 0;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => 2</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.filter(list, predicate, [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>顺序遍历数组或者对象，返回包含所有通过迭代函数真值检测的元素值。</td>\r\n        <td>同_.each</td>\r\n        <td>返回匹配的元素数组</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.filter([1, 2, 3, 4, 5, 6], </span><span class="keyword">function</span><span> (num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return num % 2 == 0;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => [2, 4, 6]</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.every(list, [predicate], [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>顺序遍历数组或者对象，如果迭代函数的每次执行都返回true，那么返回true。</td>\r\n        <td>同_.each</td>\r\n        <td>返回：真值</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>__.every([true, 2, ''yes'', undefined]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => false</span>\r\n    </p>\r\n    <p>\r\n        <span>_.every([2, 4, 6], </span><span class="keyword">function</span><span> (num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return num % 2 == 0;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => true</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.some(list, [predicate], [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>顺序遍历数组或者对象，如果迭代函数的某一次执行返回true，那么返回true；在找到匹配的元素时，就会直接中断遍历。</td>\r\n        <td>同_.each</td>\r\n        <td>返回：真值</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>__.some([true, 2, ''yes'', undefined]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => true</span>\r\n    </p>\r\n    <p>\r\n        <span>_.some([1, 3, 5], </span><span class="keyword">function</span><span> (num) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return num % 2 == 0;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => false</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.max(list, [iterate], [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>返回数组或者对象中的最大值，先把要比较的值，转化为数字，然后进行比较。</td>\r\n        <td>同_.each</td>\r\n        <td>最大值</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.max(["a", "w"]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => -Infinity</span>\r\n    </p>\r\n    <p>\r\n        <span>_.max([1, 2, 3, "w"]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => 3</span>\r\n    </p>\r\n    <p>\r\n        <span>_.max([{name: ''moe'', age: 40}, {name: ''larry'', age: 50}], </span><span class="keyword">function</span><span> (stooge) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return stooge.age;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => {name: ''curly'', age: 50};</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.min(list, [iterate], [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>返回数组或者对象中的最小值，先把要比较的值，转化为数字，然后进行比较。</td>\r\n        <td>同_.each</td>\r\n        <td>最大值</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.min(["a", "w"]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => Infinity</span>\r\n    </p>\r\n    <p>\r\n        <span>_.min([1, 2, 3, "w"]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => 1</span>\r\n    </p>\r\n    <p>\r\n        <span>_.min([{name: ''moe'', age: 40}, {name: ''larry'', age: 50}], </span><span class="keyword">function</span><span> (stooge) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return stooge.age;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => {name: ''moe'', age: 40};</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.sortBy(list, iterate, [context])</span>\r\n    </p>\r\n</div>\r\n<table class="dictionary">\r\n    <tr>\r\n        <th>描述</th><th>参数</th><th>返回</th>\r\n    </tr>\r\n    <tr>\r\n        <td>根据迭代函数的返回值，进行数组排序</td>\r\n        <td>同_.each</td>\r\n        <td>排序后的数组</td>\r\n    </tr>\r\n</table>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.sortBy([{name: ''moe'', age: 40}, {name: ''larry'', age: 50}], </span><span class="keyword">function</span><span> (stooge) {</span>\r\n    </p>\r\n    <p>\r\n        <span>return stooge.name;</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => [{name: ''curly'', age: 60}, {name: ''larry'', age: 50}, {name: ''moe'', age: 40}];</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>对象函数方法</h2>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.keys(object)</span>\r\n    </p>\r\n</div>\r\n<p>检索object拥有的所有可枚举属性的名称。</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.keys({one: 1, two: 2, three: 3});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => ["one", "two", "three"]</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.values(object)</span>\r\n    </p>\r\n</div>\r\n<p>返回object对象所有的属性值。</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.values({one: 1, two: 2, three: 3});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => [1, 2, 3]</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.extend(destination, *sources)</span>\r\n    </p>\r\n</div>\r\n<p>复制source对象中的所有属性覆盖到destination对象上，并且返回destination对象。复制是按顺序的，所以后面的对象属性会把前面的对象属性覆盖掉（如果有重复）</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.extend({name: ''moe''}, {age: 50});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => {name: ''moe'', age: 50}</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.isEmpty(object) </span>\r\n    </p>\r\n</div>\r\n<p>如果object不包含任何值（没有可枚举的属性），返回true。对于字符串和类数组（array-like）对象，如果length属性为0，那么返回true。</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.isEmpty([1, 2, 3]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => false</span>\r\n    </p>\r\n    <p>\r\n        <span>_.isEmpty({});</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => true</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.isArray(object) </span>\r\n    </p>\r\n</div>\r\n<p>如果object是一个数组，返回true。</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.isArray(arguments);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => false</span>\r\n    </p>\r\n    <p>\r\n        <span>_.isArray([1,2,3]);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => true</span>\r\n    </p>\r\n</div>\r\n\r\n\r\n<div class="code define">\r\n    <p>\r\n        <span>_.isFunction(object) </span>\r\n    </p>\r\n</div>\r\n<p>如果object是一个函数（Function），返回true。</p>\r\n\r\n<div class="code">\r\n    <p>\r\n        <span>_.isFunction(alert);</span>\r\n    </p>\r\n    <p>\r\n        <span class="notes">// => true</span>\r\n    </p>\r\n</div>', '<p>Underscore一个JavaScript工具函数库，提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。Underscore提供了100多个函数，包括常用的map, filter等；当然还有更多专业的辅助函数，如：函数绑定, JavaScript模板功能，创建快速索引，强类型相等测试等等。</p>', '2016-01-24 00:00:00', 'a9a58d60-b68b-41ff-b1f9-cd4717192792'),
(7, 'Moment.js的简要介绍', '<p>Moment.js是一个简单易用的轻量级JavaScript日期处理类库，其不依赖任何第三方库，提供了日期格式化、日期解析等功能。它支持在浏览器和NodeJS两种环境中运行。此类库能够将给定的任意日期转换成多种不同的格式，具有强大的日期计算功能，同时也内置了能显示多样的日期格式的函数。另外，它也支持多种语言，你可以任意新增一种新的语言包。</p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>Moment.js的格式化时间</h2>\r\n\r\n<p>Moment.js的格式化显示日期时间的功能是非常强大和完善的；</p>\r\n<div class="code">\r\n    <p>\r\n        <span>moment().format();</span><span class="notes">// 默认的显示</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().format(String);</span><span class="notes">// 以String的格式码显示</span>\r\n    </p>\r\n</div>\r\n\r\n<p>常用的格式代码串如下：（输出字符串与语言有关系，下面是默认下的输出）</p>\r\n<table class="dictionary">\r\n    <tr><th>分组</th><th>格式码</th><th>输出</th></tr>\r\n    \r\n    <tr><td><b>月份（Month）</b></td><td>M</td><td>1 2 ... 11 12</td></tr>\r\n    <tr><td></td><td>Mo</td><td>1st 2nd ... 11th 12th</td></tr>\r\n    <tr><td></td><td>MM</td><td>01 02 ... 11 12</td></tr>\r\n    <tr><td></td><td>MMM</td><td>Jan Feb ... Nov Dec</td></tr>\r\n    <tr><td></td><td>MMMM</td><td>January February ... November December</td></tr>\r\n    \r\n    <tr><td><b>季度（Quarter）</b></td><td>Q</td><td>1 2 3 4</td></tr>\r\n    <tr><td></td><td>Qo</td><td>1st 2nd 3rd 4th</td></tr>\r\n    \r\n    <tr><td><b>月份第几天</b></td><td>D</td><td>1 2 ... 30 31</td></tr>\r\n    <tr><td></td><td>Do</td><td>1st 2nd ... 30th 31st</td></tr>\r\n    <tr><td></td><td>DD</td><td>01 02 ... 30 31</td></tr>\r\n    \r\n    <tr><td><b>年度第几天</b></td><td>DDD</td><td>1 2 ... 364 365</td></tr>\r\n    <tr><td></td><td>DDDo</td><td>1st 2nd ... 364th 365th</td></tr>\r\n    <tr><td></td><td>DDDD</td><td>001 002 ... 364 365</td></tr>\r\n\r\n    <tr><td><b>星期（Week）</b></td><td>d</td><td>0 1 ... 5 6</td></tr>\r\n    <tr><td></td><td>do</td><td>0th 1st ... 5th 6th</td></tr>\r\n    <tr><td></td><td>dd</td><td>Su Mo ... Fr Sa</td></tr>\r\n    <tr><td></td><td>ddd</td><td>Sun Mon ... Fri Sat</td></tr>\r\n    <tr><td></td><td>dddd</td><td>Sunday Monday ... Friday Saturday</td></tr>\r\n    \r\n    <tr><td><b>年度第几周</b></td><td>w</td><td>1 2 ... 52 53</td></tr>\r\n    <tr><td></td><td>wo</td><td>1st 2nd ... 52nd 53rd</td></tr>\r\n    <tr><td></td><td>ww</td><td>01 02 ... 52 53</td></tr>\r\n\r\n    <tr><td><b>年度（Year）</b></td><td>YY</td><td>70 71 ... 29 30</td></tr>\r\n    <tr><td></td><td>YYYY</td><td>1970 1971 ... 2029 2030</td></tr>\r\n   \r\n    <tr><td><b>上下午（AM/PM）</b></td><td>A</td><td>AM PM</td></tr>\r\n    <tr><td></td><td>a</td><td>am pm</td></tr>\r\n    \r\n    <tr><td><b>小时（Hour）</b></td><td>H</td><td>0 1 ... 22 23</td></tr>\r\n    <tr><td></td><td>HH</td><td>00 01 ... 22 23</td></tr>\r\n    <tr><td></td><td>h</td><td>1 2 ... 11 12</td></tr>\r\n    <tr><td></td><td>hh</td><td>01 02 ... 11 12</td></tr>\r\n    \r\n    <tr><td><b>分钟（Minute）</b></td><td>m</td><td>0 1 ... 58 59</td></tr>\r\n    <tr><td></td><td>mm</td><td>00 01 ... 58 59</td></tr>\r\n    \r\n    <tr><td><b>秒数（Second）</b></td><td>s</td><td>0 1 ... 58 59</td></tr>\r\n    <tr><td></td><td>ss</td><td>00 01 ... 58 59</td></tr>\r\n</table>\r\n\r\n<p>更多有关Moment.js的介绍，请访问官网：<a href="http://momentjs.com/" target="_blank">http://momentjs.com/</a>；示例代码：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>moment().format(''YYYY-MM-DD HH:mm:ss'');</span><span class="notes">// 2014-09-24 23:36:09</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().format(''YYYY年MM月DD日'');</span><span class="notes">// 2014年10月01日</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>Moment.js的一些取值赋值函数</h2>\r\n\r\n<p>与Date对象一样，Moment.js也提供了更多的时间赋值，取值函数。</p>\r\n\r\n<p>毫秒（Millisecond）的取值赋值语法：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>moment().millisecond(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().millisecond();</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().milliseconds(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().milliseconds();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用0~999之内的数字输入，如果超过范围，自动进制为秒计算。</p>\r\n\r\n<p>秒（Second）的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().second(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().second();</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().seconds(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().seconds();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用0~59之内的数字输入，如果超过范围，自动进制为分计算。</p>\r\n\r\n<p>分钟（Minute）的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().minute(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().minute();</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().minutes(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().minutes();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用0~59之内的数字输入，如果超过范围，自动进制为小时计算。</p>\r\n\r\n<p>小时（Hour）的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().hour(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().hour();</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().hours(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().hours();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用0~23之内的数字输入，如果超过范围，自动进制为天计算。</p>\r\n\r\n<p>每月的第几天的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().date(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().date();</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().dates(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().dates();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用1~31之内的数字输入，如果超过范围，自动进制为月计算。</p>\r\n\r\n<p>每年的第几天的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().dayOfYear(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().dayOfYear();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用1~366之内的数字输入，如果超过范围，自动进制为年计算。</p>\r\n\r\n<p>月份（Month）的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().month(Number | String);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().month();</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().months(Number | String);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().months();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用0~11之内的数字输入，如果超过范围，自动进制为年计算。另外也可以使用几月的代表单词字符串作为输入参数，如January。另外在版本2.1.0前后计算的结果也不一致。</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment([2012, 0, 31]).month(1).format("YYYY-MM-DD");</span>\r\n    </p>\r\n    <p>\r\n        <span class="note"> // before 2.1.0    2012-03-02</span>\r\n    </p>\r\n    <p>\r\n        <span class="note"> // after 2.1.0    2012-02-29</span>\r\n    </p>\r\n</div>\r\n\r\n<p>季度（Quarter）的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().quarter(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().quarter();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用1~4之内的数字输入，如果超过范围，自动进制为年计算。其实赋值就是给当前时间加n-1个季度*3个月的长度。</p>\r\n\r\n<p>年（Year）的取值赋值语法：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().year(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().year();</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().years(Number);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().years();</span>\r\n    </p>\r\n</div>\r\n<p>Number参数可使用-270,000~270,000之内的数字输入。</p>\r\n\r\n<p>注意，当利用moment.js的链式操作设置时间，最好按单位从大到小设置，即年月周日等；否则结果会无法预料。</p>\r\n<p>上面所有的函数，都可以用get和set函数替代：</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().get(''year'');</span>\r\n        <span class="note"> // moment().get(unit) === moment()[unit]()</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().set(''year'', 2015);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().set({''year'': 2013, ''month'': 3});</span>\r\n        <span class="note"> // version 2.9.0+</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>Moment.js的一些时间操作函数</h2>\r\n\r\n<p>与Date对象一样，Moment.js也提供了更多的时间操作函数。</p>\r\n\r\n<p>时间的最大值和最小值</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment.max(Moment[,Moment...]);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment.min(Moment[,Moment...]);</span>\r\n    </p>\r\n</div>\r\n\r\n<p>时间的加减</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().add(Number, String); 或者 moment().subtract(Number, String);</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().add(Object); 或者 moment().subtract(Object);</span>\r\n    </p>\r\n</div>\r\n<p>String是时间的单位，years|y、quarters|Q、months|M、weeks|w、days|d、hours|h、minutes|m、seconds|s、milliseconds|ms，举例说明</p>\r\n<div class="code">\r\n     <p>\r\n        <span>moment().add(7, ''days'').add(1, ''months'');</span>\r\n    </p>\r\n    <p>\r\n        <span>moment().add({days:7,months:1});</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>总结</h2>\r\n\r\n<p>在这里就不详细介绍了，更多有关Moment.js的介绍，请访问官网：<a href="http://momentjs.com/" target="_blank">http://momentjs.com/</a>。</p>', '<p>Moment.js是一个简单易用的轻量级JavaScript日期处理类库，其不依赖任何第三方库，提供了日期格式化、日期解析等功能。它支持在浏览器和NodeJS两种环境中运行。此类库能够将给定的任意日期转换成多种不同的格式，具有强大的日期计算功能，同时也内置了能显示多样的日期格式的函数。另外，它也支持多种语言，你可以任意新增一种新的语言包。</p>', '2016-02-18 00:00:00', '8907dcf8-8a2e-4e39-8024-4bdadebd7295'),
(8, 'cookie.js的简要介绍', '<p>cookie.js是一个微小的JavaScript库，其是为了简化cookies的操作；它能够对cookies进行赋值，取值和一处操作；它可接受各种各样的参数，并且支持链式操作，而且不依赖任何第三方库，压缩后还真有不到1KB大小。</p>\r\n\r\n<p>你为什么想要使用它？由于原生的JavaScript对于cookies的操作是非常晦涩难用的，document.cookie是非常不够灵活的。因此cookie.js目标就是提供一个简单并且强力的cookie操作的JavaScript库。</p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>初始化安装</h2>\r\n\r\n下载<a href=''https://github.com/florian/cookie.js'' target="_blank">cookie.min.js</a>，然后引入HTML。\r\n<div class="code">\r\n   <p>\r\n      <span>&lt;script src="cookie.min.js"&gt;&lt;/script&gt;</span>\r\n   </p>\r\n</div>\r\n当然你也可以通过使用JavaScript包管理器，加载此库。\r\n<div class="code">\r\n   <p>\r\n      <span>bower install cookie --save</span>\r\n   </p>\r\n   <p>\r\n      <span>jam install cookie</span>\r\n   </p>\r\n   <p>\r\n      <span>npm install cookie_js --save</span>\r\n   </p>\r\n</div>\r\n<p>cookie.js支持AMD和CommonJS。因此如果你想要异步或者延迟的加载cookie.js，你只需要用AMD或者CommonJS的加载器require它即可。</p>\r\n\r\n<p class="sep-line"></p>\r\n<h2>如何使用</h2>\r\n\r\n<p>cookie.set</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.set(''key'', ''value'', options);</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.set({''key1'': value1, key2: value2...}, options);</span>\r\n    </p>\r\n</div>\r\n<p>cookie.set是用来设置cookies，其可以一次设置一个cookie也可以设置多个cookie。其中设置的value为自动转化为字符串存储，因此cookie.get获取的value只有string类型。</p>\r\n\r\n<p>如果你需要设置更过的配置项，例如失效时间，路径等；options参数是个key-value对象，足够你配置其他。下面是options的可接受的配置项列表：</p>\r\n<table class="dictionary">\r\n    <tr><th>key</th><th>value</th><th>默认</th></tr>\r\n    <tr><td>expires</td><td>（失效时间）失效天数，GMTString或者date对象</td><td>浏览器关闭失效</td></tr>\r\n    <tr><td>domain</td><td>（域名）指定能够访问cookie的域名</td><td>当前域名</td></tr>\r\n    <tr><td>path</td><td>（路径）指定限制访问cookie的路径</td><td>当前路径</td></tr>\r\n    <tr><td>secure</td><td>（安全）设置cookie是否只能使用安全连接访问</td><td>false</td></tr>\r\n</table>\r\n<p>你可以通过修改cookie.defaults来自定义默认的配置项。例如：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.defaults.expires = 7;</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.defaults.secure = true;</span>\r\n    </p>\r\n</div>\r\n<p>大多数开发者习惯指定失效时间以天为计数单位，但是如果你想要指定失效时间为分钟，那么你可以配置configure cookie.expiresMultiplier：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.expiresMultiplier = 60; </span><span class="notes">// Seconds.</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.expiresMultiplier = 60 * 60; </span><span class="notes">// Minutes.</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.expiresMultiplier = 60 * 60 * 24; </span><span class="notes">// Hours.</span>\r\n    </p>\r\n</div>\r\n\r\n<p class=''margin-top-1''>cookie.get</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.get(''key'', default);</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.get([''key1'', ''key2''...], default);</span>\r\n    </p>\r\n</div>\r\n<p>此方法是获取cookies的值。第二个参数default是一个可选参数，代表如果获取的cookie值为空，返回默认值。cookie.get()可以简写为cookie()。</p>\r\n\r\n<p class=''margin-top-1''>cookie.all</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.all();</span>\r\n    </p>\r\n</div>\r\n<p>获取当前所有的cookies，返回的是一个所有cookies组成的对象。</p>\r\n\r\n<p class=''margin-top-1''>cookie.remove</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.remove(''key'');</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.remove(''key1'', ''key2'');</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.remove([''key1'', ''key2'']);</span>\r\n    </p>\r\n</div>\r\n<p>移除或者删除cookie，可以删除一个或者多个。</p>\r\n\r\n<p class=''margin-top-1''>cookie.empty</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.empty();</span>\r\n    </p>\r\n</div>\r\n<p>清空所有的cookies。</p>\r\n\r\n<p class=''margin-top-1''>cookie.enabled</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.enabled();</span>\r\n    </p>\r\n</div>\r\n<p>这个方法是检测浏览器是否限制cookie的使用。例如：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>if (cookie.enabled()) {</span>\r\n    </p>\r\n    <p class=''text-indent-4''>\r\n        <span class=''notes''>// Do stuff with cookies</span>\r\n    </p>\r\n    <p>\r\n        <span>} else {</span>\r\n    </p>\r\n    <p class=''text-indent-4''>\r\n        <span class=''notes''>// Display error message or use localStorage</span>\r\n    </p>\r\n    <p>\r\n        <span>}</span>\r\n    </p>\r\n</div>\r\n\r\n<p class=''margin-top-1''>cookie.setDefault</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.setDefault(json);</span>\r\n    </p>\r\n</div>\r\n<p>此方法是设置cookie的默认值，例如：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.set(''a'', ''1'');</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.setDefault({</span>\r\n    </p>\r\n    <p class=''text-indent-4''>\r\n        <span>a: ''2'',</span>\r\n    </p>\r\n    <p class=''text-indent-4''>\r\n        <span>b: ''2''</span>\r\n    </p>\r\n    <p>\r\n        <span>});</span>\r\n    </p>\r\n    <p>\r\n        <span>cookie.get([''a'', ''b'']); </span><span class=''notes''>// {a: "1", b: "2"}</span>\r\n    </p>\r\n</div>\r\n\r\n<p class="sep-line"></p>\r\n<h2>其他注意</h2>\r\n\r\n<p>cookie的set，remove和empty方法返回的是cookie对象，因此这些方法是支持链式操作的，例如：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.empty().set(''key1'', ''value1'').set(''key2'', ''value2'').remove(''key1'');</span>\r\n    </p>\r\n</div>\r\n<p>另外cookie.set的原理是将key和value，使用encodeURIComponent编码后存储在document.cookie内，而cookie.all的获取又使用decodeURIComponent进行解码取值，因此cookie.js是对于编码和解码函数原理很敏感的，不过大多数的编解码是统一的。然而PHP的编码会将空格用+号替代，因此如果是这种情况，就需要重写解码函数，例如：</p>\r\n<div class="code">\r\n    <p>\r\n        <span>cookie.utils.decode = function (value) {</span>\r\n    </p>\r\n    <p class=''text-indent-4''>\r\n        <span>return decodeURIComponent(value).replace(''+'', '' '');</span>\r\n    </p>\r\n    <p>\r\n        <span>};</span>\r\n    </p>\r\n</div>\r\n', '<p>cookie.js是一个微小的JavaScript库，其是为了简化cookies的操作；它能够对cookies进行赋值，取值和一处操作；它可接受各种各样的参数，并且支持链式操作，而且不依赖任何第三方库，压缩后还真有不到1KB大小。</p>', '2016-02-23 00:00:00', 'b9f02526-fc29-4983-8ca3-057f0d8ddf48'),
(9, '前端架构的那些事儿', '<p>在谈前端架构之前，需要先探讨一下不同人群对前端产生的困惑。前端这个职业最近几年才逐渐被认可，之前一直是低端的代名词，所以多数高手很不屑搞这个。之前的很多项目，人们对前端这块的要求也只是能用就行，所以很少会在上面去细致、深入地建立一套完善体系。而多数产品的技术经理也会是后端出身的，往往对前端的认识还停留在Java Struts那个原始的MVC模型上，或者首先想到的就是GWT和JSF，这是从后端角度出发的一种视角。用这类思维方式做出来的产品，一般用户体验都不会很好。</p>\r\n\r\n<p>另一方面，从界面层上手的人群，他对用户体验这方面会把控得比较好，但通常缺架构意识，或者说是软件工程的意识。在界面层比较复杂的情况下，很可能会有失控的趋势。对整个系统结构的认知程度通常不够深入，也缺乏设计模式等方面的知识。</p>\r\n\r\n<p>开发人员会有一些困惑：</p>\r\n<ul>\r\n    <li>\r\n        <p>创建项目的时候，一般没有人作前端的技术选型</p>\r\n    </li>\r\n    <li>\r\n        <p>拿到项目之后，没有直接可复制的基础版本</p>\r\n    </li>\r\n    <li>\r\n        <p>习惯于引用第三方组件</p>\r\n    </li>\r\n    <li>\r\n        <p>赶功能，需要某个组件或者特效</p>\r\n    </li>\r\n    <li>\r\n        <p>上网搜到一个合适的，加进来</p>\r\n    </li>\r\n    <li>\r\n        <p>它还依赖一些别的库</p>\r\n    </li>\r\n    <li>\r\n        <p>文件大还是次要的</p>\r\n    </li>\r\n    <li>\r\n        <p>可能会产生冲突，样式也不一致</p>\r\n    </li>\r\n</ul>\r\n\r\n<p>开发经理也会有一些困惑：</p>\r\n<ul>\r\n    <li><p>协作过程感觉有问题</p></li>\r\n    <li><p>前端人员写原始界面，包含静态界面和特效</p></li>\r\n    <li><p>开发人员接着改，加逻辑</p></li>\r\n    <li><p>发现有问题要返工了</p></li>\r\n    <li><p>在谁的代码基础上继续改？如何合并？</p></li>\r\n    <li><p>为什么还有这么多人工环节？</p></li>\r\n    <li><p>能自动单元测试吗？</p></li>\r\n    <li><p>能自动发布打包吗？</p></li>\r\n</ul>\r\n\r\n<p>用户会对这些事情感到烦恼：</p>\r\n<ul>\r\n    <li><p>长得丑</p></li>\r\n    <li><p>界面老土</p></li>\r\n    <li><p>风格不一致</p></li>\r\n    <li><p>速度慢</p></li>\r\n    <li><p>加载慢</p></li>\r\n    <li><p>渲染慢</p></li>\r\n    <li><p>执行慢</p></li>\r\n    <li><p>出错</p></li>\r\n</ul>\r\n\r\n<p>架构的本质是什么？其实也是一种管理。通常我们所说的管理，都是指对于任务和人员的管理，而架构管的是机器和代码。比如说，机器的部署属于运维的物理架构，SOA属于服务架构，那么，前端的架构指什么呢？</p>\r\n\r\n<p>长期以来，前端所处的位置是比较偏应用层，而且是很薄的一层，而架构又要求深度和广度，所以之前在前端里面做架构，好比在小水塘里游泳，稍微扑腾两下就到处碰壁。但最近这几年来，前端的范围被大大拓展了，所以这一层逐渐变得大有可为。</p>\r\n\r\n<p>怎样去理解架构呢？在早期的文字MUD游戏里，有这么一句话：“你感觉哪里不对，但是又说不上来。”在我们开发和使用软件系统的过程中，或多或少会遇到这样的感觉，有这种感觉就说明架构方面可能有些问题。</p>\r\n\r\n<p>在狭义的前端领域，架构要处理的很重要的事情是组件的集成。由于JavaScript本身缺乏命名空间这样的机制，多数框架都倾向于自己搞一套，所以这方面的碎片化是很严重的。如果一个公司的实力不足以自研所有用到的组件，就会一直面临这方面的问题。</p>\r\n<p>比如说，在做某个功能的过程中，发现需要一个组件，时间来不及做，就到网上搜了个，加到代码里面，先运行起来再说。一不小心，等功能做完的时候，已经引入了无数种组件了，有很多代码是重叠的，可能有的还有冲突，外观也不一致。环顾四周的大型互联网公司，基本上都有自己的前端框架，比如阿里的Kissy和Arale，腾讯的JX，百度的Tangram，360的QWrap等，为什么？因为要整合别的框架，并且在此基础上发展适合自己的组件库，代价非常大，初期没办法的时候只能凑合，长期来说，所有代码都可控的意义非常重要。</p>\r\n\r\n<p>那么，是不是一套框架可以包打天下呢，这个真的很难。对于不同的产品形态，如果想要用一套框架去适应，有的会偏轻，有的又偏重，有的要兼容低端浏览器，有的又不要，很难取舍。常见的前端产品形态包括：</p>\r\n\r\n<ul>\r\n    <li>\r\n        <p>内容型Web站点 侧重渲染方面的优化，前端逻辑比重小</p>\r\n    </li>\r\n    <li>\r\n        <p>操作型B/S系统 以数据和逻辑为中心，界面较规整</p>\r\n    </li>\r\n    <li>\r\n        <p>内嵌Web的本地应用 要处理缓存和一些本地接口，包括PC客户端和移动端</p>\r\n    </li>\r\n</ul>\r\n\r\n<p>另外有Web游戏，因为跟我们的企业形态关系不大，而且也比较独特，所以不包含在内。这三种产品的前端框架要处理的事情显然是不太一样的，所以可以细分成2-3种项目模板，整理出对应的种子项目，供同类产品初始化用。</p>\r\n\r\n<p>最近我们经常在前端领域听说两个词：全端、全栈。</p>\r\n<p>全端的意思是，原来的只做在浏览器中运行的Web程序不够，还要做各种终端，包括iOS，Android等本地应用，甚至PC桌面应用。</p>\r\n<p>为什么广义的前端应当包含本地应用呢？因为现在的本地应用，基于很多考虑，都变成了混合应用，也就是说，开发这个应用的技术，既包含原生的代码，也包含了嵌入的HTML5代码。这么一来，就造成了开发本地应用的人技能要求较广，能够根据产品的场景，合理选择每个功能应当使用的技术。现在有一些PC端的混合应用开发技术，比如node-webkit和hex，前者的典型应用是Intel® XDK，后者的典型应用是有道词典，此外，豌豆荚的PC客户端也是采用类似技术的，也有一些产品是用的qt-webkit。这类技术可以方便做跨平台，极大减少开发工作量。所以，我们可以看到，在很多公司，开发安卓、iOS应用的人员跟Web前端的处于同一个团队中，这很大程度上就是考虑到这种情况。</p>\r\n<p>全栈的意思是，除了只做在浏览器中运行的代码，还写一些服务端的代码，这个需求又是从哪里来的呢？</p>\r\n<p>这个需求其实来自优化。我们要优化一个系统的前端部分，有这么一些事情可以做：1、HTML结构的优化，减少DOM树的层次等等；2、CSS渲染性能的优化，批量写入DOM变更之类；3、资源文件的优化，比如小图片的合并，图像格式的处理，图标字体的使用等；4、JavaScript逻辑的优化，模块化，异步加载，性能优化；5、加载字节量的优化，主要是分摊的策略；6、HTTP请求的优化；这里面，除了前三条，其他都可能跟后端有些关系，尤其是最后一条。但是前端的人没法去优化后端的东西，这是不同的协作环节，所以就很麻烦。</p>\r\n<p>那么，如果有了全栈，这个问题可以怎么解决呢？比如说，我们要做最原始的小文件合并，可以在服务器做一些配置，把多个合并成一个请求，比如天猫的某个url：</p>\r\n<p class=''url''>http://g.tbcdn.cn/kissy/k/1.4.1/??dom/base-min.js,event-min.js,event/dom/base-min.js,event/base-min.js,event/dom/touch-min.js,event/dom/shake-min.js,event/dom/focusin-min.js,event/custom-min.js,cookie-min.js?t=1.js</p>\r\n<p>这个就很明显是多个文件合并而成的，9个小文件的请求，合并成了一个64k的文件请求。这种简单的事情可以在静态代理服务器上配置出来，更复杂的就比较难了，需要一定的服务端逻辑。比如说，我们有多个ajax请求，请求不同的服务，每个请求的数据量都非常少，但因为请求数很多，可能会影响加载性能，如果能把它们在服务端就合并成一个就好了。但这个优化是前端发起的，传统模式下，他的职责范围有限，优化不到服务端去，而这多个服务很可能是跨产品模块的，想要合并，放在哪个后端团队都很怪异。</p>\r\n<p>这可真难办，就像老虎追猴子，猴子上了树，老虎只能在下面干瞪眼。但是如果我们能让老虎上树，这就不是个问题了。如果有这么一层NodeJS，这一层完全由前端程序员控制，他就可以在这个地方做这种合并，非常的合理。</p>\r\n<p>除此之外，我们常常会用到HTML模板，但使用它的最佳位置是随着产品的场景而不同的，可能某个地方在前端更好，可能某个地方在后端好些。到底放在哪合适，只有前端开发人员才会知道，如果前端开发人员不能参与一部分后端代码的开发，优化工作也还是做不彻底。有NodeJS之后会怎样呢，因为不管前端模板还是后端模板，都是JavaScript的，可以使用同一套库，这样在做调整的时候不会有代码迁移的烦恼，直接把模板换地方即可。</p>\r\n<p>现在，也有很多业务场景有实时通信的需求，目前来说最合适的方案是Socket.io，它默认使用NodeJS来当服务端，这也是NodeJS的一个重要使用场景。</p>\r\n<p>这样，前端开发人员也部分参与了运行在服务端的代码，他的工作范围从原先客户端浏览器，向后拓展了一个薄层，所以就有了全栈的称呼。至于说这个称呼还继续扩展，一个前端开发人员从视觉到交互到静态HTML到JavaScript包办的情况，这个就有些过头了。</p>\r\n\r\n<p>以上这些，主要解决的都是代码层面的事情。另外有一个方面，也是需要关注，但却常常不能引起重视的，那就是前端的工程化问题。</p>\r\n\r\n<p>早期为什么没有这些问题？因为那时候前端很简单，复杂度不高，现在整个很复杂了，就带来了很多管理问题。比如说整个系统的前端都组件化了之后，HTML会拆分成各种模板，JavaScript会拆分成各种模块，而CSS也通过LESS或者SASS这种方式，变成了一种编译式的语言。</p>\r\n<p>这时候，我们考虑一个所谓的组件，它就比较麻烦了。它可能是一个或者多个HTML模板，加上一个或者多个JavaScript模块，再包含CSS中的一部分构成的，而前两者都可能有依赖项，三个部分也都要避免与其他组件的冲突。</p>\r\n<p>这些东西都需要管理，并且提供一种比较好的方案去维护。在JavaScript被模块化之后，也可以通过单元测试来控制它们的质量，并且把这个过程自动化，每次版本有变更之前，保证它们最基本的正确性。最终，需要有一种自动化的发布机制，把这几类代码提取，打包合并，压缩，发布。</p>\r\n<p>目前这方面研究最深入的是之前百度FIS团队的张云龙，强烈推荐阅读。</p>\r\n', '<p>在谈前端架构之前，需要先探讨一下不同人群对前端产生的困惑。前端这个职业最近几年才逐渐被认可，之前一直是低端的代名词，所以多数高手很不屑搞这个。之前的很多项目，人们对前端这块的要求也只是能用就行，所以很少会在上面去细致、深入地建立一套完善体系。而多数产品的技术经理也会是后端出身的，往往对前端的认识还停留在Java Struts那个原始的MVC模型上，或者首先想到的就是GWT和JSF，这是从后端角度出发的一种视角。用这类思维方式做出来的产品，一般用户体验都不会很好。</p>', '2016-02-24 00:00:00', 'aaadf918-f903-4c19-bc52-06be2e603e82');

-- --------------------------------------------------------

--
-- Table structure for table `articles_type`
--

CREATE TABLE IF NOT EXISTS `articles_type` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `notes` varchar(500) NOT NULL DEFAULT '',
  `uuid` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `articles_type`
--

INSERT INTO `articles_type` (`id`, `title`, `notes`, `uuid`) VALUES
(1, 'HTML/CSS', 'HTML/CSS', ''),
(2, 'JavaScript', 'JavaScript', ''),
(3, 'Node/Database', 'Node/Database', 'b83fc189-518b-4bbd-a270-a6a96652ceef'),
(4, '网络协议', '网络协议', ''),
(5, '开发工具', '开发工具', 'b57221e6b-c034-421e-9903-f9fc4fcfbab9'),
(6, '行业杂谈', '行业杂谈', '');

-- --------------------------------------------------------

--
-- Table structure for table `mottos`
--

CREATE TABLE IF NOT EXISTS `mottos` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `author` varchar(255) NOT NULL DEFAULT '',
  `content` text NOT NULL,
  `theme` varchar(255) NOT NULL DEFAULT '',
  `slider` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='格言' AUTO_INCREMENT=6 ;

--
-- Dumping data for table `mottos`
--

INSERT INTO `mottos` (`id`, `author`, `content`, `theme`, `slider`) VALUES
(1, '软件工程的Mosher定律', '程序有问题时不要担心。如果所有东西都没问题，你就失业了。', 'them1.jpg', 'slider1.jpg'),
(2, 'Jessica Gaston', '一个人写的烂软件将会给另一个人带来一份全职工作。', 'them2.jpg', 'slider2.jpg'),
(3, '比尔-盖茨', '按代码行数来评估软件开发的进度，就如同按重量来评估飞机建造的进度。', 'them3.jpg', 'slider3.jpg'),
(4, 'Ryan Campbell', '注释代码很像清洁你的厕所——你不想干，但如果你做了，这绝对会给你和你的客人带来更愉悦的体验。', 'them4.jpg', 'slider4.jpg'),
(5, 'Anonymous', '除非最后一个用户死掉，软件是不会有完工的时候的。', 'them6.jpg', 'slider6.jpg');

-- --------------------------------------------------------

--
-- Table structure for table `twitter`
--

CREATE TABLE IF NOT EXISTS `twitter` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `content` varchar(500) DEFAULT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=4 ;

--
-- Dumping data for table `twitter`
--

INSERT INTO `twitter` (`id`, `title`, `content`, `date`) VALUES
(1, '庆祝老婆驾照科目二考试顺利通过！！', '<img src="/assert/images/ext/happy.png" alt="庆祝">', '2016-01-11 11:42:00'),
(2, '宝贝，我爱你！！', '<ul class="photos">     <li>         <img src="/assert/images/ext/201601141158/1.png" alt="宝贝">     </li><li>         <img src="/assert/images/ext/201601141158/2.png" alt="宝贝">     </li><li>         <img src="/assert/images/ext/201601141158/3.png" alt="宝贝">     </li><li>         <img src="/assert/images/ext/201601141158/4.png" alt="宝贝">     </li><li>         <img src="/assert/images/ext/201601141158/5.png" alt="宝贝">     </li><li>         <img src="/assert/images/ext/201601141158/6.png" alt="宝贝">', '2016-01-11 11:58:00'),
(3, '庆祝老婆驾照科目三考试顺利通过！！', '<img src="/assert/images/ext/happy.png" alt="庆祝">', '2016-02-22 11:42:00');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
